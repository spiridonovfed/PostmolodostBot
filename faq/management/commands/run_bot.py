import os

from asgiref.sync import sync_to_async
from django.core.management.base import BaseCommand
from telegram import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from faq.models import StartMessage
from faq.retriever import FAQRetriever

BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram FAQ-–±–æ—Ç–∞ –¥–ª—è –ü–æ—Å—Ç–ú–æ–ª–æ–¥–æ—Å—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG"

    PAGE_SIZE = 10

    def handle(self, *args, **kwargs):
        if not BOT_TOKEN:
            self.stderr.write("–û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ.")
            return

        retriever = FAQRetriever()

        def make_faq_keyboard(faqs, page, page_size):
            start = page * page_size
            end = start + page_size
            page_faqs = faqs[start:end]
            keyboard = [[InlineKeyboardButton(faq["question"], callback_data=f"faq_{faq['id']}")] for faq in page_faqs]
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
            if end < len(faqs):
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page_{page+1}"))
            if nav_buttons:
                keyboard.append(nav_buttons)
            return InlineKeyboardMarkup(keyboard)

        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            messages = await sync_to_async(list)(StartMessage.objects.order_by("id"))
            if not messages:
                text = (
                    "*üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ—Å—Ç–ú–æ–ª–æ–¥–æ—Å—Ç—å FAQ-–±–æ—Ç!*\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ‚Äî –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è, "
                    "–ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã."
                )
                await update.message.reply_text(text, parse_mode="Markdown")
            else:
                for msg in messages:
                    await update.message.reply_text(msg.message, parse_mode="Markdown")

        async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_q = update.message.text
            user_emb = retriever.model.encode([user_q], normalize_embeddings=True)[0]
            scores = retriever.embeddings @ user_emb

            min_score = 0.65
            top_k = 4

            top_indices = [i for i in scores.argsort()[::-1] if scores[i] >= min_score]

            if not top_indices:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å "
                    "–≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–µ–º.",
                    parse_mode="Markdown",
                )
                return

            top_indices = top_indices[:top_k]
            buttons = [
                [InlineKeyboardButton(retriever.faqs[i]["question"], callback_data=f"faq_{retriever.faqs[i]['id']}")]
                for i in top_indices
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(
                "–í–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç:",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )

        async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            data = query.data

            sorted_faqs = sorted(retriever.faqs, key=lambda f: f["question"].lower())
            page_size = self.PAGE_SIZE

            if data.startswith("faq_"):
                faq_id = int(data[4:])
                faq = next((f for f in retriever.faqs if f["id"] == faq_id), None)
                if faq:
                    question = faq["question"]
                    answer = faq["answer"]
                    text = f"*{question}*\n\n{answer}"
                    await query.message.reply_text(text, parse_mode="Markdown")
                else:
                    await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")

            elif data.startswith("page_"):
                page = int(data[5:])
                reply_markup = make_faq_keyboard(sorted_faqs, page, page_size)
                await query.edit_message_reply_markup(reply_markup=reply_markup)

        async def list_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
            faqs = retriever.faqs
            if not faqs:
                await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.", parse_mode="Markdown")
                return

            sorted_faqs = sorted(faqs, key=lambda f: f["question"].lower())
            page = 0
            reply_markup = make_faq_keyboard(sorted_faqs, page, self.PAGE_SIZE)
            await update.message.reply_text(
                "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç)",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )

        async def refresh_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            await sync_to_async(retriever.refresh_faqs)()
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="Markdown")

        async def post_init(application):
            commands = [
                BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"),
                BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É)"),
                BotCommand("refresh", "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"),
            ]
            await application.bot.set_my_commands(commands)

        app = ApplicationBuilder().token(BOT_TOKEN).post_init(post_init).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("list", list_questions))
        app.add_handler(CommandHandler("refresh", refresh_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
        app.add_handler(CallbackQueryHandler(button))

        app.run_polling()
